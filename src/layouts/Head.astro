---
import {authors, site} from "@/lib/constants";
import {AstroFont} from "astro-font";

export interface Props {
	title?: string | undefined;
	image?: string | undefined;
	description?: string | undefined;
	robots?: string;
	author?: string;
}

const {title, description, image, robots, author} = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const pageTitle = title ? `${title} | ${site.title}` : site.title;
const pageDesc = description ? description : site.description;
const ogImage = image ? image : `${Astro.url.origin}/images/siteog.jpg`;
const authorName = author ? author : authors.ankur.fullName;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="language" content="en" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="icon" href="/icons/favicon.ico" />
<meta name="generator" content={Astro.generator} />

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Author Meta Tag -->
<meta name="author" content={authorName} />

<!-- Robots Meta Tags -->
{robots && <meta name="robots" content={robots} />}

<!-- Primary Meta Tags -->
<title>{pageTitle}</title>
<meta name="title" content={pageTitle} />
<meta name="description" content={pageDesc} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={pageDesc} />
<meta property="og:image" content={ogImage} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={pageTitle} />
<meta property="twitter:description" content={pageDesc} />
<meta name="twitter:image" content={ogImage} />
<meta name="twitter:site" content={authors.ankur.twitter} />

<AstroFont
	config={[
		{
			name: "Raleway",
			src: [],
			googleFontsURL:
				"https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100..900;1,100..900&display=swap",
			preload: true,
			display: "swap",
			fallback: "sans-serif",
		},
		{
			name: "RockSalt",
			src: [],
			googleFontsURL: "https://fonts.googleapis.com/css2?family=Rock+Salt&display=swap",
			preload: true,
			display: "swap",
			fallback: "sans-serif",
		},
		{
			name: "Inter",
			src: [],
			googleFontsURL: "https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap",
			preload: true,
			display: "swap",
			fallback: "sans-serif",
		},
	]}
/>

<script is:inline data-astro-rerun>
	window._disableTransitionWhileExecuting = (_function) => {
		document.documentElement.classList.add("[&_*]:!transition-none");
		try {
			_function();
		} catch (_) {
		} finally {
			window.setTimeout(() => {
				document.documentElement.classList.remove("[&_*]:!transition-none");
			}, 20);
		}
	};
	window._applyTheme = (theme = "light", mode = "light") => {
		window._disableTransitionWhileExecuting(() => {
			document.documentElement.setAttribute("data-theme", theme);
			document.documentElement.setAttribute("data-theme-mode", mode);
			if (mode === "dark") document.documentElement.classList.add("dark");
			else document.documentElement.classList.remove("dark");
			localStorage.setItem("theme", `${theme}@${mode}`);
			try {
				let _mtc = document.querySelector('meta[name="theme-color"]');
				if (!_mtc) _mtc = document.createElement("meta");
				_mtc.setAttribute("name", "theme-color");
				_mtc.setAttribute("content", mode === "dark" ? "#111827" : "#FFFFFF");
				const _g = document.querySelector('script[src="https://giscus.app/client.js"]');
				_g?.setAttribute("data-theme", mode === "dark" ? "transparent_dark" : "light");
				const _gf = document.querySelector("iframe.giscus-frame");
				const _gfu = new URL(_gf?.getAttribute("src") || "");
				_gfu.searchParams.set("theme", mode === "dark" ? "transparent_dark" : "light");
				_gf?.setAttribute("src", _gfu.toString());
				const preferredMode = mode === "dark" ? "preferredDarkMode" : "preferredLightMode";
				umami.track(preferredMode, {theme: theme, mode: mode});
			} catch (_) {}
		});
	};
	window._restoreTheme = () => {
		let [th, mo] = ["light", "light"];
		const _stored = localStorage.getItem("theme");
		if (!_stored && window.matchMedia("(prefers-color-scheme: dark)").matches)
			[th, mo] = ["dark", "dark"];
		if (_stored) [th, mo] = _stored.split("@");
		window._applyTheme(th, mo);
	};
	window._restoreTheme();
</script>
