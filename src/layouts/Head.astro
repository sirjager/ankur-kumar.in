---
import {site} from "@/lib/constants";

export interface Props {
	title?: string | undefined;
	description?: string | undefined;
	image?: string | undefined;
}

const {title = site.title, description = site.description} = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const pageTitle = title ? `${title} | ${site.title}` : site.title;
const pageDesc = description ? description : site.description;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" href="/icons/favicon.ico" />
<meta name="generator" content={Astro.generator} />

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{pageTitle}</title>
<meta name="title" content={pageTitle} />
<meta name="description" content={pageDesc} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={pageDesc} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={pageTitle} />
<meta property="twitter:description" content={pageDesc} />

<link
	href="/fonts/inter.ttf"
	as="font"
	rel="preload prefetch"
	type="font/ttf"
	crossorigin="anonymous"
/>

<link
	href="/fonts/raleway.ttf"
	as="font"
	rel="preload prefetch"
	type="font/ttf"
	crossorigin="anonymous"
/>

<!-- This needs to be inlinded to avoid FOUC (Flash of unstyled content) -->
<script is:inline lang="js">
	// @ts-ignore @ts-nocheck : used to set giscuss theme
	let theme, themeMode;
	const __apply__ = (th, mo) => {
		document.documentElement.setAttribute("data-theme", th);
		document.documentElement.setAttribute("data-theme-mode", mo);
		if (mo === "dark") document.documentElement.classList.add("dark");
		else document.documentElement.classList.remove("dark");
		var emt = document.querySelector('meta[name="theme-color"]');
		if (emt) emt.setAttribute("content", "#4285f4");
		else {
			emt = document.createElement("meta");
			emt?.setAttribute("name", "theme-color");
			emt.setAttribute("content", "#4285f4");
		}
	};
	const __theming__ = () => {
		const _s = localStorage.getItem("theme");
		let [th, mo] = ["light", "light"];
		if (typeof localStorage !== "undefined") {
			if (_s) [th, mo] = _s.split("@");
			else localStorage.setItem("theme", `${th}@${mo}`);
		}
		theme = th;
		themeMode = mo;
		__apply__(th, mo);
	};
	__theming__();
	// for darkmode when using view transition api
	document.addEventListener("astro:after-swap", __theming__);
</script>
